# INTRO

# indices of strings must be integers if we were to select a non integer we would recieve a TypeError. (ex of good indicies of strings: print(favorite_fruit[0])) (ex of bad: print(favorite_fruit[0.5]))

#selects single items from strings ^

#-------------------------------------------------------------------------

# CUT ME A SLICE OF STRING
# slicing a string: select entire chunks of characters from a string
# string[first_index:last_index]

# If we remove the first index, the slice starts at the beginning of the string and if we remove the second index the slice continues to the end of the string.
#i.e: print(favorite_fruit[:4]) or print (favorite_fruit[4:])

# You’re a programmer working for Copeland’s Corporate Company. At this company, each employee’s user name is generated by taking the first five letters of their last name.

# A new employee, Rodrigo Villanueva, is starting today and you need to create his account. His first_name and last_name are stored as strings in script.py.

# Create a variable new_account by slicing the first five letters of his last_name.

from wsgiref.handlers import IISCGIHandler


first_name = "Rodrigo"
last_name = "Villanueva"

new_account = (last_name[:5])

# Temporary passwords for new employees are also generated from their last names.

# Create a variable called temp_password by creating a slice out of the third through sixth letters of last_name. Your string should have a total of 4 characters.

temp_password = (last_name[2:6])

#--------------------------------------------------------------------------

# Copeland’s Corporate Company has realized that their policy of using the first five letters of an employee’s last name as a user name isn’t ideal when they have multiple employees with the same last name.

# Write a function called account_generator() that takes two inputs, first_name and last_name and concatenates the first three letters of each and then returns the new account name.
# Test your function on the first_name and last_name provided in script.py and save it to the variable new_account.

first_name = "Julie"
last_name = "Blevins"

def account_generator(first_name, last_name):
  account_name = first_name[:3] + last_name[:3]
  return account_name

new_account = account_generator(first_name, last_name)

print(new_account)
#print: JulBle

#------------------------------------------------------------------------------

# String Slicing with len

# Copeland’s Corporate Company also wants to update how they generate temporary passwords for new employees.

# Write a function called password_generator() that takes two inputs, first_name and last_name, and then concatenates the last three letters of each and returns them as a string.

first_name = "Reiko"
last_name = "Matsuki"

def password_generator(first_name, last_name):
  last_three_chars = first_name[len(first_name)-3:] + last_name[len(last_name)-3:]
  return last_three_chars

  # Test your function on the provided first_name and last_name and save it to the variable temp_password.

temp_password = password_generator(first_name, last_name)
print(temp_password)

# ---------------------------------------------------------------------------

# NEGATIVE INDICES

# Use negative indices to find the second to last character in company_motto. Save this to the variable second_to_last.
company_motto = "Copeland's Corporate Company helps you capably cope with the constant cacophony of daily life"

second_to_last = company_motto[-2]
#print(second_to_last)
final_word = company_motto[-4:]
#print(final_word)

#-------------------------------------------------------------------------

# STRINGS ARE IMMMUTABLE
# we’ve been selecting characters from strings, slicing strings, and concatenating strings. Each time we perform one of these operations we are creating an entirely new string.

# This is because strings are immutable. This means that we cannot change a string once it is created. We can use it to create other strings, but we cannot change the string itself.

# This property, generally, is known as mutability. Data types that are mutable can be changed, and data types, like strings, that are immutable cannot be changed.

# The most recent hire at Copeland’s Corporate Company is a fellow named Rob Daily. Unfortunately, Human Resources seem to have made a bit of a typo and sent over the wrong first_name.

#Concatenate the string "R" with a slice of first_name that includes everything but the first character, "B", and save it to a new string fixed_first_name.

first_name = "Bob"
last_name = "Daily"

fixed_first_name = "R" + first_name[1:3]
print(fixed_first_name)

#----------------------------------------------------------------------------

# ESCAPE CHARACTERS
# how to add strings that already have a special meaning in python: \
# ex: favorite_fruit_conversation = "He said, \"blueberries are my favorite!\""

password = "theycallme\"crazy\"91"

#------------------------------------------------------------------------------

#ITERATING THROUGH STRINGS

# Let’s replicate a function you are already familiar with, len().

# Write a new function called get_length() that takes a string as an input and returns the number of characters in that string. Do this by iterating through the string, don’t cheat and use len()!

def get_length(word):
  counter = 0
  for letter in word:
    counter += 1
  return counter

  #-------------------------------------------------------------------------

  # strings and conditional pt.I

  #example code: 
favorite_fruit = "blueberry"
counter = 0
for character in favorite_fruit:
  if character == "b":
    counter = counter + 1
print(counter)

# This code will count the number of bs in the string “blueberry” (hint: it’s two). Let’s take a moment and break down what exactly this code is doing.

# First, we define our string, favorite_fruit, and a variable called counter, which we set equal to zero. Then the for loop will iterate through each character in favorite_fruit and compare it to the letter b.

# Each time a character equals b the code will increase the variable counter by one. Then, once all characters have been checked, the code will print the counter, telling us how many bs were in “blueberry”. This is a great example of how iterating through a string can be used to solve a specific application, in this case counting a certain letter in a word.

def letter_check(word, letter):
  for character in word:
    if character == letter:
      return True
  return False
letter_check("strawberry", "a")

#-----------------------------------------------------------------------------

# strings and conditionals pt.II

# use "in" to check if one string is part of another string

def contains(big_string, little_string):
  return little_string in big_string

def common_letters(string_one, string_two):
  common = []
  for letter in string_one:
    if (letter in string_two) and not (letter in common):
      common.append(letter)
  return common

  common_letters("banana", "cream")


  #---------------------------------------------------------------------

#   Copeland’s Corporate Company has finalized what they want their username and temporary password creation to be and have enlisted your help, once again, to build the function to generate them. In this exercise, you will create two functions, username_generator and password_generator.

# Let’s start with username_generator. Create a function called username_generator take two inputs, first_name and last_name and returns a username. The username should be a slice of the first three letters of their first name and the first four letters of their last name. If their first name is less than three letters or their last name is less than four letters it should use their entire names.

# For example, if the employee’s name is Abe Simpson the function should generate the username AbeSimp.

def username_generator(first_name, last_name):
    if len(first_name) < 3:
        user_name = first_name
    else:
        user_name = first_name[0:3]
    if len(last_name) < 4:
        user_name += last_name
    else:
        user_name += last_name[0:4]
    return user_name
  

#  Now for the temporary password, they want the function to take the input user name and shift all of the letters by one to the right, so the last letter of the username ends up as the first letter and so forth. For example, if the username is AbeSimp, then the temporary password generated should be pAbeSim.

# Start by defining the function password_generator so that it takes one input, username and in it define an empty string named password.

def password_generator(user_name):
    password = ""
    for i in range(0, len(user_name)):
        password += user_name[i-1]
    return password

#-----------------------------------------------------------------------------

#We want to fix the case to title and uppercase only

poem_title = "spring storm"
poem_author = "William Carlos Williams"

poem_title_fixed = poem_title.title()
print(poem_title)
print(poem_title_fixed)

poem_author_fixed = poem_author.upper()
print(poem_author)
print(poem_author_fixed)

#-----------------------------------------------------------------------------

# splitting strings
# .split() will return each word in the string
# even with no spaces, it will return the same result 

line_one = "The sky has given over"

line_one_words = line_one.split()
print(line_one_words)

# RESULT: ['The', 'sky', 'has', 'given', 'over']

#_---------------------------------------------------------------------------

# splitting strings II
# you can also use .split() to dicate the character we want our string to be split on.
# provide 'n' as an argument for split to it will be split at each 'n' character into a list of 'n' strings.
# *if you split a string on a character that it also ends with, you'll e3nd up with an empty string at the end of the list

authors = "Audre Lorde,Gabriela Mistral,Jean Toomer,An Qi,Walt Whitman,Shel Silverstein,Carmen Boullosa,Kamala Suraiyya,Langston Hughes,Adrienne Rich,Nikki Giovanni"

author_names = authors.split(',')

print(author_names)

author_last_names = []
for name in author_names:
  author_last_names.append(name.split()[-1])
  
print(author_last_names)

# RESULT: ['Audre Lorde', 'Gabriela Mistral', 'Jean Toomer', 'An Qi', 'Walt Whitman', 'Shel Silverstein', 'Carmen Boullosa', 'Kamala Suraiyya', 'Langston Hughes', 'Adrienne Rich', 'Nikki Giovanni']
# ['Lorde', 'Mistral', 'Toomer', 'Qi', 'Whitman', 'Silverstein', 'Boullosa', 'Suraiyya', 'Hughes', 'Rich', 'Giovanni']

#---------------------------------------------------------------------------

# splitting strings III

# you can use escape sequences to indicate a split by soomething in a string that is not necessarily a character. \n (New line) or \t (horizontal tab)
# \n will allow us to split multi line strings by line breaks
# \t will be used with certain datasets because it's not uncommon for data points to be separated by tabs.

spring_storm_text = \
"""The sky has given over 
its bitterness. 
Out of the dark change 
all day long 
rain falls and falls 
as if it would never end. 
Still the snow keeps 
its hold on the ground. 
But water, water 
from a thousand runnels! 
It collects swiftly, 
dappled with black 
cuts a way for itself 
through green ice in the gutters. 
Drop after drop it falls 
from the withered grass-stems 
of the overhanging embankment."""

spring_storm_lines = spring_storm_text.split('\n')
print(spring_storm_lines)

# RESULT: ['The sky has given over ', 'its bitterness. ', 'Out of the dark change ', 'all day long ', 'rain falls and falls ', 'as if it would never end. ', 'Still the snow keeps ', 'its hold on the ground. ', 'But water, water ', 'from a thousand runnels! ', 'It collects swiftly, ', 'dappled with black ', 'cuts a way for itself ', 'through green ice in the gutters. ', 'Drop after drop it falls ', 'from the withered grass-stems ', 'of the overhanging embankment.']

# -------------------------------------------------------------------------

# .join() joins a list of strings
# the argument is the list because join is a string method which means it has to act on a string.

reapers_line_one_words = ["Black", "reapers", "with", "the", "sound", "of", "steel", "on", "stones"]
reapers_line_one = (' '.join(reapers_line_one_words))
print(reapers_line_one)

#RESULT: Black reapers with the sound of steel on stones. wITHOUT THE .join() you would get:
# Blackreaperswiththesoundofsteelonstones
#---------------------------------------------------------------------------

#.join() strings II
# using escape sequences \n as a delimeter. It can help join together a list of strings.

winter_trees_lines = ['All the complicated details', 'of the attiring and', 'the disattiring are completed!', 'A liquid moon', 'moves gently among', 'the long branches.', 'Thus having prepared their buds', 'against a sure winter', 'the wise trees', 'stand sleeping in the cold.']

winter_trees_full = '\n'.join(winter_trees_lines)
print(winter_trees_full)

# RESULT: All the complicated details
# of the attiring and
# the disattiring are completed!
# A liquid moon
# moves gently among
# the long branches.
# Thus having prepared their buds
# against a sure winter
# the wise trees
# stand sleeping in the cold.

#----------------------------------------------------------------------------

# .strip() 
#removes all whitespace characters from beginning to end. You can also remove characters.
# You can remove anything as long as you include it as an argument.

love_maybe_lines = ['Always    ', '     in the middle of our bloodiest battles  ', 'you lay down your arms', '           like flowering mines    ','\n' ,'   to conquer me home.    ']


love_maybe_lines_stripped = []

for line in love_maybe_lines:
  love_maybe_lines_stripped.append(line.strip())
  
love_maybe_full = '\n'.join(love_maybe_lines_stripped)

print(love_maybe_full)

# RESULT: 
# Always
# in the middle of our bloodiest battles
# you lay down your arms
# like flowering mines

# to conquer me home.
#----------------------------------------------------------------------------

#.replace()



toomer_bio = \
"""
Nathan Pinchback Tomer, who adopted the name Jean Tomer early in his literary career, was born in Washington, D.C. in 1894. Jean is the son of Nathan Tomer was a mixed-race freedman, born into slavery in 1839 in Chatham County, North Carolina. Jean Tomer is most well known for his first book Cane, which vividly portrays the life of African-Americans in southern farmlands.
"""

toomer_bio_fixed = toomer_bio.replace("Tomer", "Toomer")

# RESULT
# Nathan Pinchback Toomer, who adopted the name Jean Toomer early in his literary career, was born in Washington, D.C. in 1894. Jean is the son of Nathan Toomer was a mixed-race freedman, born into slavery in 1839 in Chatham County, North Carolina. Jean Toomer is most well known for his first book Cane, which vividly portrays the life of African-Americans in southern farmlands.

#--------------------------------------------------------------------------

#.find()
#searches the string it was run on for that string and returns the first index value where that string is located.

god_wills_it_line_one = "The very earth will disown you"
disown_placement = god_wills_it_line_one.find('disown')
print(disown_placement)

#result: 20
#----------------------------------------------------------------------------

# .format()
# Python also provides a handy string method for including variables in strings. This method is .format(). .format() takes variables as an argument and includes them in the string that it is run on. You include {} marks as placeholders for where those variables will be imported.

def poem_title_card(title, poet):
    return "The poem \"{}\" is written by {}.".format(title, poet)
print(poem_title_card("I Hear America Singing", "Walt Whitman"))

# RESULT:  The poem "I Hear America Singing" is written by Walt Whitman.

#-----------------------------------------------------------------------------

# format II


def poem_description(publishing_date, author, title, original_work):
  poem_desc = "The poem {title} by {author} was originally published in {original_work} in {publishing_date}.".format(publishing_date = publishing_date, author = author, title = title, original_work = original_work)
  return poem_desc

author = "Shel Silverstein"
title = "My Beard"
original_work = "Where the Sidewalk Ends"
publishing_date = "1974"

my_beard_description = poem_description(publishing_date, author, title, original_work)

print(my_beard_description)

# Result:  The poem My Beard by Shel Silverstein was originally published in Where the Sidewalk Ends in 1974.

#---------------------------------------------------------------------------

# REVIEW 

highlighted_poems = "Afterimages:Audre Lorde:1997,  The Shadow:William Carlos Williams:1915, Ecstasy:Gabriela Mistral:1925,   Georgia Dusk:Jean Toomer:1923,   Parting Before Daybreak:An Qi:2014, The Untold Want:Walt Whitman:1871, Mr. Grumpledump's Song:Shel Silverstein:2004, Angel Sound Mexico City:Carmen Boullosa:2013, In Love:Kamala Suraiyya:1965, Dream Variations:Langston Hughes:1994, Dreamwood:Adrienne Rich:1987"

# print(highlighted_poems)

highlighted_poems_list = highlighted_poems.split(',')

# print(highlighted_poems_list)

highlighted_poems_stripped = []

for poem in highlighted_poems_list:
  highlighted_poems_stripped.append(poem.strip())
  
# print(highlighted_poems_stripped)

highlighted_poems_details = []

for poem in highlighted_poems_stripped:
  highlighted_poems_details.append(poem.split(':'))
  
titles = []
poets = []
dates = []

for poem in highlighted_poems_details:
  titles.append(poem[0])
  poets.append(poem[1])
  dates.append(poem[2])
  
for i in range(0,len(highlighted_poems_details)):
    print('The poem {} was published by {} in {}'.format(titles[i], poets[i], dates[i]))

# RESULT

# The poem Afterimages was published by Audre Lorde in 1997
# The poem The Shadow was published by William Carlos Williams in 1915
# The poem Ecstasy was published by Gabriela Mistral in 1925
# The poem Georgia Dusk was published by Jean Toomer in 1923
# The poem Parting Before Daybreak was published by An Qi in 2014
# The poem The Untold Want was published by Walt Whitman in 1871
# The poem Mr. Grumpledump's Song was published by Shel Silverstein in 2004
# The poem Angel Sound Mexico City was published by Carmen Boullosa in 2013
# The poem In Love was published by Kamala Suraiyya in 1965
# The poem Dream Variations was published by Langston Hughes in 1994
# The poem Dreamwood was published by Adrienne Rich in 1987
